// <auto-generated />
using System;
using Bibliotek.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Bibliotek.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220504142959_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Bibliotek.Models.BookModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Lent")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LoanDateTimeEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LoanDateTimeStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("Pages")
                        .HasColumnType("int");

                    b.Property<string>("Tittle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserModelID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserModelID");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Bibliotek.Models.EBookModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Lent")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LoanDateTimeEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LoanDateTimeStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Tittle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserModelID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserModelID");

                    b.ToTable("EBookModel");
                });

            modelBuilder.Entity("Bibliotek.Models.MovieModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Director")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Length")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Lent")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LoanDateTimeEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LoanDateTimeStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Tittle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserModelID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserModelID");

                    b.ToTable("MovieModel");
                });

            modelBuilder.Entity("Bibliotek.Models.UserModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Bibliotek.Models.BookModel", b =>
                {
                    b.HasOne("Bibliotek.Models.UserModel", null)
                        .WithMany("LentBooks")
                        .HasForeignKey("UserModelID");
                });

            modelBuilder.Entity("Bibliotek.Models.EBookModel", b =>
                {
                    b.HasOne("Bibliotek.Models.UserModel", null)
                        .WithMany("LentEbooks")
                        .HasForeignKey("UserModelID");
                });

            modelBuilder.Entity("Bibliotek.Models.MovieModel", b =>
                {
                    b.HasOne("Bibliotek.Models.UserModel", null)
                        .WithMany("LentMovies")
                        .HasForeignKey("UserModelID");
                });

            modelBuilder.Entity("Bibliotek.Models.UserModel", b =>
                {
                    b.Navigation("LentBooks");

                    b.Navigation("LentEbooks");

                    b.Navigation("LentMovies");
                });
#pragma warning restore 612, 618
        }
    }
}
